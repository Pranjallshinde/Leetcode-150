class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: if root is null OR matches p OR matches q
        if (root == null || root == p || root == q) {
            return root;
        }

        // Search left and right subtrees
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        // Case 1: if both left and right are non-null â†’ root is LCA
        if (left != null && right != null) {
            return root;
        }

        // Case 2: return whichever side is non-null
        return (left != null) ? left : right;
    }
}
